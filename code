function [output, tempoof, leig1, leig2, leig3] = oof3response(image, radii, options)
	

	    tempoof = zeros(size(image, 1), size(image, 2), size(image, 3), numel(radii));
	    leig1 = zeros(size(image, 1), size(image, 2), size(image, 3), numel(radii));
	    leig2 = zeros(size(image, 1), size(image, 2), size(image, 3), numel(radii));
	    leig3 = zeros(size(image, 1), size(image, 2), size(image, 3), numel(radii));
	

	    % marginwidth is used to define the image border which is cropped to 
	    % circumvent the FFT wrap-around artifacts and save memory during 
	    % calculation.
	    % It is disabled by default. Enable it by uncommenting the second line
	    % below this description.
	    marginwidth = [0 0 0];
	    % marginwidth = [ceil((max(radii)+sigma*3)/pixelspacing(1)) ceil((max(radii)+sigma*3)/pixelspacing(2)) ceil((max(radii)+sigma*3)/pixelspacing(3)) ];
	

	    output=image(marginwidth(1)+1:end-marginwidth(1), marginwidth(2)+1:end-marginwidth(2), marginwidth(3)+1:end-marginwidth(3))*0; 
	    
	    % Default options
	    rtype = 0;
	    etype = 1;
	    ntype = 1;
	    pixelspacing=[1 1 1];
	    sigma= min(pixelspacing);
	   
	    if exist('options', 'var')~=0
	        if isfield(options, 'spacing')~=0
	            pixelspacing = options.spacing;
	            sigma= min(pixelspacing);
	        end
	        if isfield(options, 'responsetype')~=0
	            rtype = options.responsetype;
	        end
	        if isfield(options, 'normalizationtype')~=0
	            ntype = options.normalizationtype;
	        end
	        if isfield(options, 'sigma')~=0
	            sigma = options.sigma;
	        end
	        if isfield(options, 'useabsolute')~=0
	            etype = options.useabsolute;
	        end
	        if ((min(radii)<sigma) & ntype>0)
	            disp('Sigma must be >= minimum range to enable the advanced normalization. The current setting falls back to options.normalizationtype=0, because of the undersize sigma.');
	            ntype = 0;
	        end
	    end
	    
	    imgfft = fftn(image);
	    
	    %Obtaining the Fourier coordinate
	    [x,y,z] = ifftshiftedcoormatrix([size(image,1) size(image,2) size(image,3)]);
	    
	    
	    % Casting the Fourier coordiantes to be of the same type as image
	    x=x+image(1)*0;
	    y=y+image(1)*0;
	    z=z+image(1)*0;
	    % End of the type casting
	    x=x/size(image,1)/pixelspacing(1);
	    y=y/size(image,2)/pixelspacing(2);
	    z=z/size(image,3)/pixelspacing(3);        
	    radius=realsqrt(x.^2+y.^2+z.^2)+1e-12;
	    
	    % Save memory by clearing x y z. Although obtained from different
	    % functions, x y z are equivalent to:
	    % x = ifftshiftedcoordinate(size(image), 1, pixelspacing)
	    % y = ifftshiftedcoordinate(size(image), 2, pixelspacing)
	    % z = ifftshiftedcoordinate(size(image), 3, pixelspacing)
	    % If main memory (or GPU memory) has enough memory to buffer the 
	    % entire x,y,z, comment the following clear command and replace the 
	    % equivalent bufferred variables inside the following for-loop. It 
	    % gives around 20% speed up.
	    clear x y z 
	

	    for i=1:length(radii)
	        fprintf('Working on radii %d\n', radii(i));
	        normalization = 4/3*pi*radii(i)^3/(besselj(1.5, 2*pi*radii(i)*1e-12)/(1e-12)^(3/2)) /radii(i)^2 * ((radii(i)/sqrt(2*radii(i)*sigma-sigma*sigma))^ntype);
	        
	        besseljBuffer = normalization * exp((-(sigma)^2)*2*pi*pi* (radius.^2))./(radius.^(3/2));
	        besseljBuffer = ( sin(2*pi*radii(i)*radius)./(2*pi*radii(i)*radius) - cos(2*pi*radii(i)*radius)) .* besseljBuffer.*sqrt(1/pi/pi/radii(i)./radius) ;
	

	        % clear radius
	        besseljBuffer=besseljBuffer.*imgfft;
	

	% There are 6 3D IFFT performed at each radius. Here we use in-place FFT to
	% save memory, although the code looks clumpsy.
	% If you are using Cuda-enabled GPU acceleration or you have large enough 
	% memory to use out-of-place FFT, uncomment the following 6 lines, and
	% comment the inplace FFT codes. It gives about 20%-40% overall speed up.
	%          outputfeature_11 = freqOp(real(ifftn(x.*x.*besseljBuffer)), marginwidth);
	%          outputfeature_12 = freqOp(real(ifftn(x.*y.*besseljBuffer)), marginwidth); 
	%          outputfeature_13 = freqOp(real(ifftn(x.*z.*besseljBuffer)), marginwidth);
	% % 
	%          outputfeature_22 = freqOp(real(ifftn(y.*y.*besseljBuffer)), marginwidth); 
	%          outputfeature_23 = freqOp(real(ifftn(y.*z.*besseljBuffer)), marginwidth);
	% % 
	%          outputfeature_33 = freqOp(real(ifftn(z.*z.*besseljBuffer)), marginwidth); 
	

	% Inplace FFT
	        buffer=ifftshiftedcoordinate(size(image), 1, pixelspacing).^2.* ............x.*x.*  .....    
	                                     besseljBuffer;
	        buffer=ifft(buffer, [], 1);buffer=ifft(buffer, [], 2);buffer=ifft(buffer, [], 3, 'symmetric');
	        buffer = freqOp(buffer, marginwidth); outputfeature_11 = buffer;
	        clear buffer;
	        buffer=ifftshiftedcoordinate(size(image), 1, pixelspacing).*ifftshiftedcoordinate(size(image), 2, pixelspacing).* ........x.*y.*  .....    
	                                     besseljBuffer;
	        buffer=ifft(buffer, [], 1);buffer=ifft(buffer, [], 2);buffer=ifft(buffer, [], 3, 'symmetric');                                 
	        buffer = freqOp(buffer, marginwidth); outputfeature_12 = buffer;
	        clear buffer;        
	        buffer=ifftshiftedcoordinate(size(image), 1, pixelspacing).*ifftshiftedcoordinate(size(image), 3, pixelspacing).* ........x.*z.*  .....    
	                                     besseljBuffer;                                 
	        buffer=ifft(buffer, [], 1);buffer=ifft(buffer, [], 2);buffer=ifft(buffer, [], 3, 'symmetric');                                 
	        buffer = freqOp(buffer, marginwidth); outputfeature_13 = buffer;
	        clear buffer;        
	

	        buffer=ifftshiftedcoordinate(size(image), 2, pixelspacing).^2.* .........*y.*y  .....    
	                                     besseljBuffer;
	        buffer=ifft(buffer, [], 1);buffer=ifft(buffer, [], 2);buffer=ifft(buffer, [], 3, 'symmetric');                                 
	        buffer = freqOp(buffer, marginwidth); outputfeature_22 = buffer;
	        clear buffer;        
	        buffer=ifftshiftedcoordinate(size(image), 2, pixelspacing).*ifftshiftedcoordinate(size(image), 3, pixelspacing).* ........y.*z.*  .....    
	                                     besseljBuffer;
	        buffer=ifft(buffer, [], 1);buffer=ifft(buffer, [], 2);buffer=ifft(buffer, [], 3, 'symmetric');                                 
	        buffer = freqOp(buffer, marginwidth); outputfeature_23 = buffer;
	        clear buffer;            
	

	        buffer=ifftshiftedcoordinate(size(image), 3, pixelspacing).^2.* ........ z.*z.*  .....    
	                                     besseljBuffer;
	        buffer=ifft(buffer, [], 1);buffer=ifft(buffer, [], 2);buffer=ifft(buffer, [], 3, 'symmetric');        
	        buffer = freqOp(buffer, marginwidth); outputfeature_33 = buffer;            
	% End of in-place FFT
	        
	        % Tips: If you are using Cuda-enabled GPU acceleration, uncomment
	        % the following line, and comment the second line below to gain
	        % about 10% extra speed up. GPU works better if data is fed into ALU
	        % individually. CPU works better if data is feed as a hold block.
	        %[eigenvalue1,eigenvalue2,eigenvalue3] = arrayfun(@eigenvaluefield33, outputfeature_11, outputfeature_12, outputfeature_13, outputfeature_22, outputfeature_23, outputfeature_33);
	        [eigenvalue1,eigenvalue2,eigenvalue3] = eigenvaluefield33(outputfeature_11, outputfeature_12, outputfeature_13, outputfeature_22, outputfeature_23, outputfeature_33);
	        leig1(:, :, :, i) = eigenvalue1;
	        leig2(:, :, :, i) = eigenvalue2;
	        leig3(:, :, :, i) = eigenvalue3;
	        
	        % The following code sorts the unorderred eigenvalues according to
	        % their magnitude. 
	        maxe = eigenvalue1;
	        mine = eigenvalue1;
	        clear eigenvalue1;        
	        mide = maxe + eigenvalue2 + eigenvalue3;
	        
	        if (etype==1)
	            maxe(abs(eigenvalue2)>abs(maxe)) = eigenvalue2(abs(eigenvalue2)>abs(maxe));
	            mine(abs(eigenvalue2)<abs(mine)) = eigenvalue2(abs(eigenvalue2)<abs(mine));
	            clear eigenvalue2;
	

	            maxe(abs(eigenvalue3)>abs(maxe)) = eigenvalue3(abs(eigenvalue3)>abs(maxe));
	            mine(abs(eigenvalue3)<abs(mine)) = eigenvalue3(abs(eigenvalue3)<abs(mine));
	            clear eigenvalue3;
	        else
	            maxe((eigenvalue2)>abs(maxe)) = eigenvalue2((eigenvalue2)>abs(maxe));
	            mine((eigenvalue2)<abs(mine)) = eigenvalue2((eigenvalue2)<abs(mine));
	            clear eigenvalue2;
	

	            maxe((eigenvalue3)>abs(maxe)) = eigenvalue3((eigenvalue3)>abs(maxe));
	            mine((eigenvalue3)<abs(mine)) = eigenvalue3((eigenvalue3)<abs(mine));
	            clear eigenvalue3;
	        end
	        
	        mide = mide - maxe - mine;
	        clear mine;
	        
	% Feel free the change the combination of the eigenvalues, just as vesselness mesaure        
	        switch rtype
	            case 0,
	                tmpfeature = maxe;
	            case 1,
	                tmpfeature = maxe+mide;
	            case 2,
	                tmpfeature = realsqrt(max(0, maxe.*mide));
	            case 3,
	                tmpfeature = realsqrt(max(0, maxe).*max(0, mide));
	            case 4,
	                tmpfeature = max(maxe, 0);
	            case 5,
	                tmpfeature = max(maxe+mide, 0);
	        end
	        clear mide;
	% Select the voxelwise responses according to the largest mangitude response
	        tempoof(:, :, :, i) = tmpfeature;
	        condition = (abs(tmpfeature)>abs(output));
	        output(condition) = tmpfeature(condition);
	    end
	    
	end
	

	

	function result=freqOp(freq, marginwidth)
	    result=freq(marginwidth(1)+1:size(freq,1)-marginwidth(1), marginwidth(2)+1:size(freq,2)-marginwidth(2), marginwidth(3)+1:size(freq,3)-marginwidth(3));
	end
	

	%  varargout=ifftshiftedcoormatrix(dimension)
	% The dimension is a vector specifying the size of the returned coordinate
	% matrices. The number of output argument is equals to the dimensionality
	% of the vector "dimension". All the dimension is starting from "1"
	function varargout=ifftshiftedcoormatrix(dimension)
	dim=length(dimension);
	p = floor(dimension/2);
	

	    for i=1:dim
	        a=([p(i)+1:dimension(i) 1:p(i)])-p(i)-1;
	        reshapepara=ones(1,dim);
	        reshapepara(i)=dimension(i);
	        A=reshape(a, reshapepara);
	        repmatpara=dimension;
	        repmatpara(i)=1;
	        varargout{i}=repmat(A, repmatpara);
	    end
	end
	

	function output=ifftshiftedcoordinate(dimension, dimindex, pixelspacing)
	    dim=length(dimension);
	    p = floor(dimension/2);
	    a=single([p(dimindex)+1:dimension(dimindex) 1:p(dimindex)])-p(dimindex)-1;
	    a=a/pixelspacing(dimindex)/dimension(dimindex);
	    reshapepara=ones(1,dim, 'single');
	    reshapepara(dimindex)=dimension(dimindex);
	    
	    a=reshape(a, reshapepara);
	    repmatpara=dimension;
	    repmatpara(dimindex)=1;
	    output=repmat(a, repmatpara);
	end

